name: 'Scheduled Infrastructure Health Check'

on:
  schedule:
    - cron: '0 8 * * MON-FRI'  # Weekdays at 8 AM UTC
  workflow_dispatch:

# Required for OIDC
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  health-check:
    name: 'Infrastructure Health Check'
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Add timeout to prevent cancellation
    strategy:
      matrix:
        environment: [dev, staging, prod]
        include:
          - environment: dev
            aws_region: eu-central-1
          - environment: staging
            aws_region: eu-central-1
          - environment: prod
            aws_region: eu-central-1
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ matrix.environment == 'dev' && vars.AWS_ROLE_ARN_DEV || matrix.environment == 'staging' && vars.AWS_ROLE_ARN_STAGING || vars.AWS_ROLE_ARN_PROD }}
        role-session-name: GitHubActions-HealthCheck-${{ matrix.environment }}-${{ github.run_id }}
        aws-region: ${{ matrix.aws_region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.5

    - name: Create Minimal Vars File
      run: |        # Create basic vars file for health check
        cat > terraform/${{ matrix.environment }}-env/terraform.tfvars << EOF
        databricks_host = "${{ matrix.environment == 'dev' && secrets.DATABRICKS_HOST_DEV || matrix.environment == 'staging' && secrets.DATABRICKS_HOST_STAGING || secrets.DATABRICKS_HOST_PROD }}"
        databricks_token = "${{ matrix.environment == 'dev' && secrets.DATABRICKS_TOKEN_DEV || matrix.environment == 'staging' && secrets.DATABRICKS_TOKEN_STAGING || secrets.DATABRICKS_TOKEN_PROD }}"
        databricks_warehouse_id = "${{ matrix.environment == 'dev' && secrets.DATABRICKS_WAREHOUSE_ID_DEV || matrix.environment == 'staging' && secrets.DATABRICKS_WAREHOUSE_ID_STAGING || secrets.DATABRICKS_WAREHOUSE_ID_PROD }}"
        aws_region = "${{ matrix.aws_region }}"
        environment = "${{ matrix.environment }}"
        catalog_name = "${{ matrix.environment == 'dev' && vars.CATALOG_NAME_DEV || matrix.environment == 'staging' && vars.CATALOG_NAME_STAGING || vars.CATALOG_NAME_PROD || 'default_catalog' }}"
        schema_name = "${{ matrix.environment == 'dev' && vars.SCHEMA_NAME_DEV || matrix.environment == 'staging' && vars.SCHEMA_NAME_STAGING || vars.SCHEMA_NAME_PROD || 'default_schema' }}"
        table_name = "${{ matrix.environment == 'dev' && vars.TABLE_NAME_DEV || matrix.environment == 'staging' && vars.TABLE_NAME_STAGING || vars.TABLE_NAME_PROD || 'default_table' }}"
        volume_name = "${{ matrix.environment == 'dev' && vars.VOLUME_NAME_DEV || matrix.environment == 'staging' && vars.VOLUME_NAME_STAGING || vars.VOLUME_NAME_PROD || 'default_volume' }}"
        project_name = "${{ vars.PROJECT_NAME || 'country-currency-pipeline' }}"
        app_name = "${{ vars.APP_NAME || 'country-currency-app' }}"
        skip_validation = false
        EOF
        # Copy to backend and databricks directories for validation script
        cp terraform/${{ matrix.environment }}-env/terraform.tfvars terraform/${{ matrix.environment }}-env/backend/terraform.tfvars
        cp terraform/${{ matrix.environment }}-env/terraform.tfvars terraform/${{ matrix.environment }}-env/databricks-ifra/terraform.tfvars

    - name: Run Health Check
      run: |
        echo "🏥 Running health check for ${{ matrix.environment }} environment..."
        
        # Make the validation script executable
        chmod +x ./scripts/validate.sh
        
        # Run validation with environment and data checks
        if ./scripts/validate.sh --environment ${{ matrix.environment }} --check-data; then
          echo "✅ Health check passed for ${{ matrix.environment }}!"
        else
          echo "❌ Health check failed for ${{ matrix.environment }} environment"
          exit 1
        fi

    - name: Report Results
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          🚨 **Health Check Failed**
          - Environment: ${{ matrix.environment }}
          - Time: $(date)
          - Check logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}