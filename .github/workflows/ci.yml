name: 'CI - Validate and Test'

on:
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'scripts/**'
      - 'etl_data/**'
      - 'notebooks/**'
  push:
    branches: [ develop ]

env:
  TF_VERSION: '1.5.0'
  PYTHON_VERSION: '3.9'

# Required for OIDC
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  validate-terraform:
    name: 'Terraform Validation'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [dev, staging, prod]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets[format('AWS_ROLE_ARN_{0}', matrix.environment == 'dev' && 'DEV' || matrix.environment == 'staging' && 'STAGING' || 'PROD')] }}
        role-session-name: GitHubActions-${{ matrix.environment }}-${{ github.run_id }}
        aws-region: eu-central-1  # Based on your terraform.tfvars

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive terraform/

    - name: Validate Backend Configuration
      working-directory: terraform/${{ matrix.environment }}-env/backend
      run: |
        terraform init -backend=false
        terraform validate

    - name: Validate Databricks Configuration  
      working-directory: terraform/${{ matrix.environment }}-env/databricks-ifra
      run: |
        terraform init -backend=false
        terraform validate
  validate-scripts:
    name: 'Bash Script Validation'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Test Bash Scripts Syntax
      run: |
        echo "🔍 Validating bash scripts..."
        
        # Check if script files exist
        if [ ! -f "scripts/validate.sh" ] && [ ! -f "scripts/deploy.sh" ]; then
          echo "❌ No bash scripts found in scripts directory"
          exit 1
        fi
        
        # Validate bash script syntax
        for script in scripts/*.sh; do
          if [ -f "$script" ]; then
            echo "Validating $script..."
            bash -n "$script" || {
              echo "❌ Syntax error in $script"
              exit 1
            }
            echo "✅ $script syntax is valid"
          fi
        done

    - name: Run ShellCheck (Static Analysis)
      run: |
        # Install shellcheck
        sudo apt-get update
        sudo apt-get install -y shellcheck
        
        echo "🔍 Running ShellCheck static analysis..."
        
        # Run shellcheck on all bash scripts
        for script in scripts/*.sh; do
          if [ -f "$script" ]; then
            echo "Analyzing $script..."
            shellcheck "$script" || {
              echo "❌ ShellCheck issues found in $script"
              exit 1
            }
            echo "✅ $script passed ShellCheck"
          fi
        done

    - name: Test Script Execution (Dry Run)
      run: |
        echo "🧪 Testing script execution capabilities..."
        
        # Make scripts executable
        chmod +x scripts/*.sh
        
        # Test validate.sh with help flag
        if [ -f "scripts/validate.sh" ]; then
          echo "Testing validate.sh..."
          ./scripts/validate.sh --help || {
            echo "❌ validate.sh help execution failed"
            exit 1
          }
          echo "✅ validate.sh help executed successfully"
        fi

  validate-data:
    name: 'Data Validation'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Dependencies
      run: |
        pip install pandas pytest
        
    - name: Validate CSV Data
      run: |
        python -c "
        import pandas as pd
        import sys
        
        # Load and validate CSV
        try:
            df = pd.read_csv('etl_data/country_code_to_currency_code.csv')
            
            # Check required columns
            required_cols = ['country_code', 'country_number', 'country', 'currency_name', 'currency_code', 'currency_number']
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                print(f'Missing columns: {missing_cols}')
                sys.exit(1)
                
            # Check for null values in key columns
            null_countries = df['country_code'].isnull().sum()
            null_currencies = df['currency_code'].isnull().sum()
            
            if null_countries > 0 or null_currencies > 0:
                print(f'Found null values - Countries: {null_countries}, Currencies: {null_currencies}')
                sys.exit(1)
                
            print(f'Data validation passed - {len(df)} records, {len(df.columns)} columns')
            
        except Exception as e:
            print(f'Data validation failed: {e}')
            sys.exit(1)
        "

  integration-validation:
    name: 'Integration Validation'
    runs-on: ubuntu-latest
    needs: [validate-terraform, validate-scripts, validate-data]
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
        
    - name: Test Validation Script (No Infrastructure)
      run: |
        echo "🧪 Testing validation script functionality..."
        
        # Make validation script executable
        chmod +x ./scripts/validate.sh
        
        # Test script help and argument parsing
        echo "Testing help functionality..."
        ./scripts/validate.sh --help
        
        echo "✅ Validation script structure test passed"
        
        # Test that script handles missing infrastructure gracefully
        echo "Testing script behavior with missing infrastructure..."
        if ./scripts/validate.sh --environment dev --no-check-data 2>&1 | grep -q "validation\|check\|error"; then
          echo "✅ Script handles missing infrastructure appropriately"
        else
          echo "⚠️  Script behavior with missing infrastructure unclear"
        fi

    - name: Validation Summary
      if: always()
      run: |
        echo "## 🎯 CI Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Terraform**: Format and syntax validation completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Scripts**: Bash script validation completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Data**: CSV data structure validation completed" >> $GITHUB_STEP_SUMMARY
        echo "- **Integration**: Validation script functionality tested" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY